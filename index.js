// Generated by CoffeeScript 1.9.3
(function() {
  var cacheSVGFiles, parseParams, postcss;

  postcss = require('postcss');

  cacheSVGFiles = function(dirs) {
    var data, doT, filename, files, fs, i, j, len, len1, multiplePaths, name, path, result, template;
    fs = require('fs');
    doT = require('dot');
    result = {};
    multiplePaths = dirs.length > 1;
    for (i = 0, len = dirs.length; i < len; i++) {
      path = dirs[i];
      files = fs.readdirSync(path);
      for (j = 0, len1 = files.length; j < len1; j++) {
        filename = files[j];
        if (filename.substr(-4) === '.svg') {
          data = fs.readFileSync(path + "/" + filename);
          name = filename.slice(0, -4);
          template = doT.template(data.toString());
          if (multiplePaths) {
            result[path + "/" + name] = template;
          }
          result[name] || (result[name] = template);
        }
      }
    }
    return result;
  };

  parseParams = function(string) {
    var i, key, len, ref, ref1, result, rule, value;
    result = {};
    if (!string || string.indexOf(':') === -1) {
      return result;
    }
    ref = string.replace(/[\s"]/g, '').split(';');
    for (i = 0, len = ref.length; i < len; i++) {
      rule = ref[i];
      if (rule.indexOf(':') !== -1) {
        ref1 = rule.split(':'), key = ref1[0], value = ref1[1];
        result[key] = value;
      }
    }
    return result;
  };

  module.exports = postcss.plugin("postcss-svg", function(options) {
    var SVGRegExp;
    if (options == null) {
      options = {};
    }
    SVGRegExp = /svg\(([^\)]+)\)/;
    return function(style) {
      var SVGTempates;
      SVGTempates = cacheSVGFiles(options.paths || ['svg']);
      return style.eachDecl(/^background|filter/, function(decl) {
        var argString, matches, name, params, ref, replace, svg, template;
        if (!decl.value) {
          return;
        }
        if (matches = SVGRegExp.exec(decl.value)) {
          replace = matches[0], argString = matches[1];
          argString = argString.replace(/'/g, '"');
          ref = argString.split(','), name = ref[0], params = ref[1];
          name = name.slice(1, -1);
          if (!(template = SVGTempates[name])) {
            return;
          }
          params = parseParams(params);
          svg = encodeURIComponent(template(params));
          svg = "url(\"data:image/svg+xml," + svg + "\")";
          decl.value = decl.value.replace(replace, svg);
        }
      });
    };
  });

}).call(this);
